trigger:
- main
- feature-tasks

pool:
  name: Default

steps:
- script: |
    echo Installing sonarScanner tool
    dotnet tool install --global dotnet-sonarscanner
    export PATH="$PATH:$HOME/.dotnet/tools"
    
    echo Start Scanner
    dotnet-sonarscanner begin /k:"Hello_World_Project_Hello_World_Project_AYxio5OHkVImKS8uzBdC" /d:sonar.host.url="http://172.31.23.61:9000" /d:sonar.login="$(SONARQUBE_TOKEN)"
  displayName: 'Install Sonar Tools and Start Scanner'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/feature-tasks')

- script: dotnet restore HelloWorld/HelloWorld.csproj /p:Version=1.0.$(Build.BuildId)
  displayName: 'Restore dependencies'

- script: dotnet build HelloWorld/HelloWorld.csproj --configuration Release /p:Version=1.0.$(Build.BuildId)
  displayName: 'Build project'

- script: |
    echo Run Sonar End
    export PATH="$PATH:$HOME/.dotnet/tools"
    dotnet-sonarscanner end /d:sonar.login="$(SONARQUBE_TOKEN)"
  displayName: 'Collect Sonar results and Upload'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/feature-tasks')

- script: |
    echo "Current Version: 1.0.$(Build.BuildId)"
  displayName: 'Print Version'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/feature-tasks')

- script: |
    echo "Cloning the repository"
    git clone https://github.com/orioElias/.NET-Hello-World.git
    cd .NET-Hello-World

    echo "Configuring Git user details"
    git config --global user.email "orisami233@gmail.com"
    git config --global user.name "orioElias"

    echo "Tagging build with branch name and version"
    branch_name=$(echo $(Build.SourceBranch) | awk -F/ '{print $NF}')
    version="1.0.$(Build.BuildId)"
    tag="${branch_name}_$version"
    echo "Creating tag: $tag"
    git tag $tag

    echo "Setting up remote with GitHub PAT"
    git remote set-url origin https://orioElias:$(GitHub_PAT)@github.com/orioElias/.NET-Hello-World.git

    echo "Pushing the tag to the repository"
    git push origin $tag
  displayName: 'Tag build and push'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/feature-tasks')


- script: dotnet pack HelloWorld/HelloWorld.csproj --configuration Release --output nupkgs /p:Version=1.0.$(Build.BuildId)
  displayName: 'Pack NuGet package'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/feature-tasks')

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'HelloWorld/bin/Release'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/feature-tasks')

- script: dotnet nuget push "nupkgs/*.nupkg" --source "https://pkgs.dev.azure.com/OriElias/_packaging/OriElias/nuget/v3/index.json" --api-key az --skip-duplicate
  displayName: 'Push package to Azure Artifacts'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/feature-tasks')

- script: dotnet run --project HelloWorld/HelloWorld.csproj
  displayName: 'Run application'

- task: rvo.SendEmailTask.send-email-task.SendEmail@1
  inputs:
    serverType: 'smtp'
    smtpServer: 'smtp.gmail.com'
    smtpPort: '587'
    useSSL: true
    username: '$(EmailUserName)'
    password: '$(EmailPassword)' 
    fromAddress: 'orisami233@gmail.com'
    toAddresses: '34osher@gmail.com'
    subject: 'Pipeline Execution Status'
    body: 'The pipeline has completed its execution.'
  condition: always()